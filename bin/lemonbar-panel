#! /bin/sh

PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=35
PANEL_FONT="CaskaydiaMono Nerd Font:bold:pixelsize=16"
PANEL_WM_NAME=lemonbar
export PANEL_FIFO PANEL_HEIGHT PANEL_FONT PANEL_WM_NAME

# Check if the panel is already running
if xdo id -a "$PANEL_WM_NAME" >/dev/null; then
    printf "%s\n" "The panel is already running." >&2
    exit 1
fi

# Set up cleanup on exit
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

# Helper function: Debounce mechanism
debounce() {
    local last_update="$1"
    local interval="$2"
    [ $(($(date +%s) - last_update)) -ge "$interval" ]
}

# Battery Monitor with Debounce
battery_monitor() {
    local last_battery="" last_status=""
    local last_update=0 # Track the last update time

    upower -m | while read -r line; do
        # Fetch battery percentage and state
        battery=$(upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep -E "percentage" | awk '{print $2}' | tr -d '%')
        status=$(upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep -E "state" | awk '{print $2}')

        # Update only if values changed and debounce interval has passed
        if { [ "$battery" != "$last_battery" ] || [ "$status" != "$last_status" ]; } && debounce "$last_update" 5; then
            if [ "$status" = "discharging" ]; then
                status_indicator="[-]"
            elif [ "$status" = "charging" ]; then
                status_indicator="[+]"
            else
                status_indicator=""
            fi
            echo "B B:${battery}%${status_indicator}" | tee "$PANEL_FIFO"
            last_battery="$battery"
            last_status="$status"
            last_update=$(date +%s) # Update the last update time
        fi
    done
}

# Time Monitor (Efficient Minute Updates)
time_monitor() {
    while true; do
        echo "D$(date +"%d %a, %H:%M")" | tee "$PANEL_FIFO"
        sleep $((60 - $(date +%S))) # Sleep until the next minute boundary
    done
}

# Network Monitor with Debounce
network_monitor() {
    local last_state="" last_update=0

    # Check both Ethernet and Wi-Fi states
    print_network_status() {
        eth_state=$(cat /sys/class/net/enp6s0f1/operstate 2>/dev/null || echo "down")
        wifi_state=$(cat /sys/class/net/wlp0s20f3/operstate 2>/dev/null || echo "down")
        ssid=$(iwgetid -r || echo "Disconnected")

        if [ "$eth_state" = "up" ]; then
            echo "N ETH" | tee "$PANEL_FIFO"
        elif [ "$wifi_state" = "up" ]; then
            echo "N W:${ssid}" | tee "$PANEL_FIFO"
        else
            echo "N W:Disconnected" | tee "$PANEL_FIFO"
        fi
    }

    print_network_status &

    stdbuf -oL ip monitor link | while read -r _; do
        if debounce "$last_update" 3; then
            print_network_status
            last_update=$(date +%s)
        fi
    done
}
# Start all monitors asynchronously
battery_monitor &
time_monitor &
network_monitor &
bspc subscribe report | tee "$PANEL_FIFO" &

# Source panel colors and launch lemonbar
. $HOME/.config/lemonbar/panel_colors
$HOME/.config/lemonbar/panel_bar <"$PANEL_FIFO" |
    lemonbar -a 32 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT" \
        -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" | sh &

# Ensure the panel is drawn above the root window
wid=$(xdo id -m -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
